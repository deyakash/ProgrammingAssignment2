add2 <- function(x,y){
x+y
}
add2(3,5)
add2 <- function(x,y){
x+y
print()
}
add2 <- function(x,y){
x+y
print()
}
add2(4,5)
add2 <- function(x,y){
z<-x+y
print(z)
}
add2(4,5)
z
x
above10 <- function (x) {
use <- x>10
x[use]
}
x <- 1:20
above10(x)
above <- function (x, n=10) {
use <- x>n
x[use]
}
above(x)
above(x, 15)
columnmean <- function(x) {
nc <- ncol(x)
means <- numeric(x)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(x) {
nc <- ncol(x)
means <- numeric(x)
for(i in 1:nc) {
means[i] <- mean(x[,i])
}
means
}
columnmean(airquality)
columnmean <- function(x) {
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x[,i])
}
means
}
columnmean(airquality)
swirl()
library(swirl)
swirl()
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]})
evaluate(function(x){x[1]}, dat)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("fuck off")
submit()
submit()
mad_libs("Chootistan", "fucking", "cock")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
"I" %p% "love" %p% "R!
""
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(dl)
class(Sys.Date)
class(dl)
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1<-Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time(t1))
as.POSIXlt(Sys.time(t2))
as.POSIXlt(Sys.time())
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<- "October 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
tw
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library(swirl)
swirl()
heads(flags)
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
as.list(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shaoe_mat <- sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3 ,4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
table(flags$animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
sapply(flags, unique)
vapply(flags, class, character(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass,
mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
?iris
iris
head(iris)
lapply(split(iris, iris$Species), mean)
lapply(split(iris, iris$Species), mean, na.RM = TRUE)
apply(iris, Sepal.Length, mean)
apply(iris, iris$Sepal.Length, mean)
apply(iris, iris$Sepal.Length, mean, na.RM=TRUE)
apply(iris, 1, mean, na.RM=TRUE)
iris
head(iris)
?mean
s <- split(iris, iris$Species)
lapply(s, mean)
lapply(s, mean, na.RM = TRUE)
s
s$virginica
t <- s$virginica
t
mean(t$Sepal.Length)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
head(mtcars)
mtcars
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
debug(ls)
0
Q
Q
?debug
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x
m
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x
m
c
c
Q
f
?marix
?matrix
a <- matrix(rnorm(16), nrow=4, ncol=4)
a
solve(a)
a <- matrix(rnorm(1600), nrow=40, ncol=40)
a
solve(a)
getwd()
ls()
dir()
setwd("C:/Users/A B Dey/ProgrammingAssignment2")
dir()
source(cachematrix.R)
source("cachematrix.R")
ls()
a
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
ls()
dir()
makeCacheMatrix(a)
cacheSolve(a)
dims(a)
dim(a)
summary(a)
a$get
class(a)
cacheSolve(a)
x
head(a)
